package com.cabbooking.model;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;

/**
 * Represents a cab vehicle in the fleet.
 *
 * Main Responsibilities:
 * - Stores details about each cab, such as its type and per-kilometer rate.
 * - Tracks the availability status of the cab for booking.
 *
 * Workflow:
 * - Admins create and manage Cab entities.
 * - The booking service queries for available cabs when a trip is requested.
 */
@Entity
public class Cab {

    /**
     * The unique identifier for the cab.
     * This is the primary key, automatically generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer cabId;

    /**
     * The type or category of the cab (e.g., "Sedan", "SUV", "Hatchback").
     */
    private String carType;

    /**
     * The rate charged per kilometer for this cab.
     */
    private Float perKmRate;

    /**
     * The current availability status of the cab.
     * 'true' if the cab is available for a new trip, 'false' otherwise.
     */
    private Boolean isAvailable;

    // --- Getters and Setters ---

    /**
     * Retrieves the unique ID of the cab.
     * @return The cab's ID.
     */
    public Integer getCabId() {
        return cabId;
    }

    /**
     * Sets the unique ID of the cab.
     * @param cabId The ID to set.
     */
    public void setCabId(Integer cabId) {
        this.cabId = cabId;
    }

    /**
     * Retrieves the type of the cab.
     * @return The car type as a String.
     */
    public String getCarType() {
        return carType;
    }

    /**
     * Sets the type of the cab.
     * @param carType The car type to set.
     */
    public void setCarType(String carType) {
        this.carType = carType;
    }

    /**
     * Retrieves the per-kilometer rate for the cab.
     * @return The rate as a Float.
     */
    public Float getPerKmRate() {
        return perKmRate;
    }

    /**
     * Sets the per-kilometer rate for the cab.
     * @param perKmRate The rate to set.
     */
    public void setPerKmRate(Float perKmRate) {
        this.perKmRate = perKmRate;
    }

    /**
     * Retrieves the availability status of the cab.
     * @return True if available, false otherwise.
     */
    public Boolean getIsAvailable() {
        return isAvailable;
    }

    /**
     * Sets the availability status of the cab.
     * @param isAvailable The availability status to set.
     */
    public void setIsAvailable(Boolean isAvailable) {
        this.isAvailable = isAvailable;
    }
}